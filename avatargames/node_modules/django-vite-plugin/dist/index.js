"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const picocolors_1 = __importDefault(require("picocolors"));
const vite_1 = require("vite");
let DJANGO_VERSION = '...';
async function djangoVitePlugin(config) {
    if (typeof config === 'string' || Array.isArray(config)) {
        config = { input: config };
    }
    process.stdout.write("Loading configurations...\r");
    const appConfig = JSON.parse(await execPython(['--action', 'config'], config));
    if (DJANGO_VERSION === '...') {
        process.stdout.write("Loading django version...\r");
        execPython(['--action', 'version'], config).then((v) => DJANGO_VERSION = v);
    }
    process.stdout.write("\r".padStart(26, " "));
    config = await resolvePluginConfig(config, appConfig);
    return [
        djangoPlugin(config)
    ];
}
exports.default = djangoVitePlugin;
function djangoPlugin(config) {
    const defaultAliases = getAppAliases(config.appConfig);
    let viteDevServerUrl;
    let resolvedConfig;
    //let wsServer: WebSocketServer
    //let wsConnected = false
    if (config.addAliases) {
        writeAliases(config, defaultAliases);
    }
    return {
        name: 'django-vite-plugin',
        enforce: 'pre',
        config: (userConfig, { command }) => {
            var _a, _b, _c, _d;
            const server = resolveServerConfig(config, userConfig.server);
            const build = resolveBuildConfig(config, userConfig.build);
            return {
                ...userConfig,
                base: command == 'build' ? config.appConfig.BUILD_URL_PREFIX : '',
                root: userConfig.root || config.root || '.',
                build,
                server,
                resolve: {
                    alias: Array.isArray((_a = userConfig.resolve) === null || _a === void 0 ? void 0 : _a.alias)
                        ? [
                            ...(_c = (_b = userConfig.resolve) === null || _b === void 0 ? void 0 : _b.alias) !== null && _c !== void 0 ? _c : [],
                            ...Object.keys(defaultAliases).map(alias => ({
                                find: alias,
                                replacement: defaultAliases[alias]
                            }))
                        ]
                        : {
                            ...defaultAliases,
                            ...(_d = userConfig.resolve) === null || _d === void 0 ? void 0 : _d.alias,
                        }
                },
            };
        },
        configResolved(config) {
            resolvedConfig = config;
        },
        transform(code) {
            if (resolvedConfig.command === 'serve') {
                code = code.replace(/__django_vite_placeholder__/g, viteDevServerUrl);
                return code;
            }
        },
        configureServer(server) {
            var _a;
            /*
            wsServer = server.ws
            wsServer.on('connection', () => {
                wsConnected = true
            })
            */
            (_a = server.httpServer) === null || _a === void 0 ? void 0 : _a.once('listening', () => {
                var _a;
                const address = (_a = server.httpServer) === null || _a === void 0 ? void 0 : _a.address();
                const isAddressInfo = (x) => typeof x === 'object';
                if (isAddressInfo(address)) {
                    viteDevServerUrl = resolveDevServerUrl(address, server.config);
                    setTimeout(() => {
                        server.config.logger.info(`\n  ${picocolors_1.default.red(`${picocolors_1.default.bold('DJANGO')}`)} ${DJANGO_VERSION} ${picocolors_1.default.dim('plugin')} ${picocolors_1.default.bold(`v${pluginVersion()}`)}`);
                        server.config.logger.info('');
                    }, 100);
                }
            });
            return () => server.middlewares.use((req, res, next) => {
                if (req.url === '/index.html') {
                    res.statusCode = 404;
                    res.end(fs_1.default.readFileSync(path_1.default.join(__dirname, 'info.html')).toString());
                }
                next();
            });
        }
    };
}
async function resolvePluginConfig(config, appConfig) {
    if (!config) {
        throw new Error('django-vite-plugin: no configuration is provided!');
    }
    if (typeof config.input === 'undefined') {
        throw new Error('django-vite-plugin: no input is provided!');
    }
    if (appConfig.STATIC_LOOKUP) {
        config.input = await addStaticToInputs(config.input, config);
    }
    //@ts-expect-error no way to convert decleared types
    config.appConfig = appConfig;
    if (config.addAliases === true) {
        createJsConfig(config);
    }
    config.addAliases = config.addAliases !== false;
    return config;
}
function resolveBuildConfig(config, front) {
    var _a, _b, _c;
    return {
        ...(front || {}),
        manifest: (_a = front === null || front === void 0 ? void 0 : front.manifest) !== null && _a !== void 0 ? _a : true,
        outDir: (_b = front === null || front === void 0 ? void 0 : front.outDir) !== null && _b !== void 0 ? _b : config.appConfig.BUILD_DIR,
        assetsInlineLimit: (_c = front === null || front === void 0 ? void 0 : front.assetsInlineLimit) !== null && _c !== void 0 ? _c : 0,
        rollupOptions: {
            ...((front === null || front === void 0 ? void 0 : front.rollupOptions) || {}),
            input: config.input
        },
    };
}
function resolveServerConfig(config, front) {
    var _a;
    const serverCfg = config.appConfig.SERVER;
    return {
        ...(front || {}),
        origin: (_a = front === null || front === void 0 ? void 0 : front.origin) !== null && _a !== void 0 ? _a : '__django_vite_placeholder__',
        host: (front === null || front === void 0 ? void 0 : front.host) || serverCfg.HOST,
        port: (front === null || front === void 0 ? void 0 : front.port) || serverCfg.PORT,
        strictPort: !(front === null || front === void 0 ? void 0 : front.port),
        https: (serverCfg.CERT && serverCfg.KEY) ? {
            key: fs_1.default.readFileSync(serverCfg.KEY),
            cert: fs_1.default.readFileSync(serverCfg.CERT),
        } : false
    };
}
function getAppAliases(appConfig) {
    const aliases = {
        '@': '',
    };
    const apps = appConfig.INSTALLED_APPS;
    for (const app in apps) {
        const trail = appConfig.STATIC_LOOKUP ? '/' + app : '';
        aliases[`@s:${app}`] = (0, vite_1.normalizePath)(`${apps[app]}/static${trail}`);
        aliases[`@t:${app}`] = (0, vite_1.normalizePath)(`${apps[app]}/templates${trail}`);
    }
    return aliases;
}
/**
 * Get the settings from django project
 */
function execPython(args, config) {
    return new Promise((resolve, reject) => {
        args = [...(args || []), ...(config.pyArgs || [])];
        const py = (0, child_process_1.spawn)(config.pyPath || 'python', [
            path_1.default.join(config.root || '', 'manage.py'),
            'django_vite_plugin',
            ...args
        ]);
        let err = '', res = '';
        py.stderr.on('data', (data) => {
            err += data.toString();
        });
        py.stdout.on('data', (data) => {
            res += data.toString();
        });
        py.on('close', () => {
            if (err) {
                console.log(err);
                reject(err);
            }
            else {
                resolve(res);
            }
        });
    });
}
function pluginVersion() {
    var _a;
    try {
        return (_a = JSON.parse(fs_1.default.readFileSync(path_1.default.join(__dirname, '../package.json')).toString())) === null || _a === void 0 ? void 0 : _a.version;
    }
    catch {
        return '';
    }
}
/**
 * Adds 'static' in file paths if already not exists
 */
async function addStaticToInputs(input, config) {
    if (typeof input === 'string') {
        input = [input];
    }
    const res = await execPython([
        '--find-static',
        ...(input.map(f => (0, vite_1.normalizePath)(f)))
    ], config);
    return JSON.parse(res);
}
/**
 * Resolve the dev server URL from the server address and configuration.
 */
function resolveDevServerUrl(address, config) {
    var _a;
    const configHmrProtocol = typeof config.server.hmr === 'object' ? config.server.hmr.protocol : null;
    const clientProtocol = configHmrProtocol ? (configHmrProtocol === 'wss' ? 'https' : 'http') : null;
    const serverProtocol = config.server.https ? 'https' : 'http';
    const protocol = clientProtocol !== null && clientProtocol !== void 0 ? clientProtocol : serverProtocol;
    const configHmrHost = typeof config.server.hmr === 'object' ? config.server.hmr.host : null;
    const configHost = typeof config.server.host === 'string' ? config.server.host : null;
    const serverAddress = isIpv6(address) ? `[${address.address}]` : address.address;
    const host = (_a = configHmrHost !== null && configHmrHost !== void 0 ? configHmrHost : configHost) !== null && _a !== void 0 ? _a : serverAddress;
    const configHmrClientPort = typeof config.server.hmr === 'object' ? config.server.hmr.clientPort : null;
    const port = configHmrClientPort !== null && configHmrClientPort !== void 0 ? configHmrClientPort : address.port;
    return `${protocol}://${host}:${port}`;
}
function isIpv6(address) {
    return address.family === 'IPv6'
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore-next-line
        || address.family === 6;
}
async function writeAliases(config, aliases) {
    let root = process.cwd();
    if (config.root) {
        root = path_1.default.join(root, config.root);
    }
    let jsconfigPath = path_1.default.join(root, "jsconfig.json");
    if (!fs_1.default.existsSync(jsconfigPath)) {
        if (!config.root) {
            return;
        }
        root = process.cwd();
        jsconfigPath = path_1.default.join(root, "jsconfig.json");
        if (!fs_1.default.existsSync(jsconfigPath)) {
            return;
        }
    }
    let updated = false;
    const jsconfig = JSON.parse(fs_1.default.readFileSync(jsconfigPath, "utf8"));
    jsconfig.compilerOptions = jsconfig.compilerOptions || {};
    const old = jsconfig.compilerOptions.paths || {};
    for (let alias in aliases) {
        let val = (0, vite_1.normalizePath)(path_1.default.relative(root, aliases[alias]));
        if (val !== '.') {
            val = './' + val;
        }
        val += '/*';
        alias += '/*';
        if (!old[alias] || old[alias].indexOf(val) == -1) {
            updated = true;
            old[alias] = [val];
        }
    }
    if (updated) {
        jsconfig.compilerOptions.paths = old;
        fs_1.default.writeFileSync(jsconfigPath, JSON.stringify(jsconfig, null, 2));
    }
}
function createJsConfig(config) {
    let root = process.cwd();
    let jsconfigPath = path_1.default.join(root, "jsconfig.json");
    if (fs_1.default.existsSync(jsconfigPath)) {
        return;
    }
    const DEFAULT = {
        exclude: ['node_modules']
    };
    if (!config.root) {
        fs_1.default.writeFileSync(jsconfigPath, JSON.stringify(DEFAULT, null, 2));
        return;
    }
    root = path_1.default.join(process.cwd(), config.root);
    jsconfigPath = path_1.default.join(root, "jsconfig.json");
    if (fs_1.default.existsSync(jsconfigPath)) {
        return;
    }
    fs_1.default.writeFileSync(jsconfigPath, JSON.stringify(DEFAULT, null, 2));
}
